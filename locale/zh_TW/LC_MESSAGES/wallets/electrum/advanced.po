# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Dash Core Group, Inc
# This file is distributed under the same license as the Dash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# William <narutokun.me@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-07 00:32+0000\n"
"PO-Revision-Date: 2018-03-19 12:19+0000\n"
"Last-Translator: William <narutokun.me@gmail.com>, 2020\n"
"Language-Team: Chinese (Taiwan) (https://www.transifex.com/dash/teams/37570/zh_TW/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_TW\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../wallets/electrum/advanced.rst:1
msgid ""
"Masternodes, multisig, sweeping paper wallets, cold storage and command line"
" in the Dash Electrum wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:1
msgid ""
"dash, wallet, electrum, masternode, multisig, paper, cold storage, command "
"line"
msgstr ""

#: ../../wallets/electrum/advanced.rst:9
msgid "Advanced functions"
msgstr ""

#: ../../wallets/electrum/advanced.rst:11
msgid ""
"Dash Electrum is based on `Electrum <https://electrum.org>`_, a Bitcoin "
"wallet. Most functions are identical, which means it is not necessary to "
"reproduce the entirety of the Electrum documentation here. The following "
"sections describe some frequently used advanced functions. For further "
"details on other advanced functions in Electrum for both Bitcoin and Dash, "
"please click the links below."
msgstr ""

#: ../../wallets/electrum/advanced.rst:18
msgid "`Electrum documentation <https://docs.electrum.org>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:19
msgid ""
"`Electrum seed version system "
"<https://docs.electrum.org/en/latest/seedphrase.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:20
msgid ""
"`Electrum protocol specification "
"<https://docs.electrum.org/en/latest/protocol.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:21
msgid ""
"`Serialization of unsigned or partially signed transactions "
"<https://docs.electrum.org/en/latest/transactions.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:22
msgid ""
"`Simple Payment Verification "
"<https://docs.electrum.org/en/latest/spv.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:23
msgid ""
"`The Python Console <https://docs.electrum.org/en/latest/console.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:24
msgid ""
"`Using Electrum Through Tor <https://docs.electrum.org/en/latest/tor.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:27
msgid "PrivateSend"
msgstr "匿名發送"

#: ../../wallets/electrum/advanced.rst:29
msgid ""
":ref:`PrivateSend <privatesend>` offers users enhanced privacy when creating"
" transactions by splitting the user's balance into a number of predefined "
"denominations in advance of spending. This process is known as mixing. "
"PrivateSend is available in Dash Electrum versions 3.3.8.3 and higher, with "
"support for hardware wallets added in 3.3.8.7."
msgstr ""

#: ../../wallets/electrum/advanced.rst:36
msgid "Mixing and sending"
msgstr ""

#: ../../wallets/electrum/advanced.rst:38
msgid ""
"To start mixing in Dash Electrum, select **Wallet > PrivateSend** or click "
"the **PS** icon in the lower right corner of the main window. The following "
"window appears:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:45
msgid "PrivateSend dialog in Dash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:47
msgid ""
"Enter the **Amount of Dash to keep anonymized** and the number of "
"**PrivateSend rounds to use**. Then click **Enable PrivateSend**, followed "
"by **Start Mixing**. The mixing process will begin, and the **Mixing "
"Progress** bar shows the completion progress. Additional information on the "
"process is available on the **Info** and **Log** tabs."
msgstr ""

#: ../../wallets/electrum/advanced.rst:54
msgid ""
"When mixing is complete, simply check the **PrivateSend** checkbox on the "
"**Send** tab before sending your transaction. Dash Electrum will only use "
"Dash mixed according to your specifications for the transaction."
msgstr ""

#: ../../wallets/electrum/advanced.rst:60
msgid "Hardware Wallets"
msgstr ""

#: ../../wallets/electrum/advanced.rst:62
msgid ""
"You can use hardware wallets with Dash Electrum. Under Linux, it may be "
"necessary to first install dependencies and udev rules as follows::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:68
msgid ""
"PrivateSend mixing is also supported. Starting PrivateSend mixing in Dash "
"Electrum with a hardware wallet will generate a new HD wallet and mnemonic "
"for the PrivateSend keystore. A transaction from the hardware wallet to an "
"address in this keystore will be created, and mixing will begin. You can "
"then spend the mixed Dash, or send it back to your hardware wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:76
msgid "Masternodes"
msgstr "主節點"

#: ../../wallets/electrum/advanced.rst:78
msgid ""
"Dash Electrum supports masternode creation through an interface called the "
"**Masternode Manager**. The functionality is available starting from the "
"protocol version 70201."
msgstr ""

#: ../../wallets/electrum/advanced.rst:83
msgid "Masternode Manager"
msgstr ""

#: ../../wallets/electrum/advanced.rst:85
msgid ""
"The Masternode Manager can be accessed either from the **Wallet > "
"Masternodes** menu or by pressing **Ctrl+M**. This manager displays the "
"status of your masternode(s). A wallet with no masternodes will begin with a"
" default masternode for which you can fill in the necessary information."
msgstr ""

#: ../../wallets/electrum/advanced.rst:91
msgid ""
"The manager displays the following data about each masternode you have set "
"up:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:94
msgid "The alias (name) of the masternode."
msgstr ""

#: ../../wallets/electrum/advanced.rst:95
msgid "The status of the masternode (e.g. whether it has been activated)."
msgstr ""

#: ../../wallets/electrum/advanced.rst:96
msgid "The collateral payment of the masternode."
msgstr ""

#: ../../wallets/electrum/advanced.rst:97
msgid "The private delegate key."
msgstr ""

#: ../../wallets/electrum/advanced.rst:98
msgid "The IP address and port that your masternode can be reached at."
msgstr ""

#: ../../wallets/electrum/advanced.rst:99
msgid "The protocol version that your masternode supports."
msgstr ""

#: ../../wallets/electrum/advanced.rst:102
msgid "Masternode setup"
msgstr ""

#: ../../wallets/electrum/advanced.rst:104
msgid ""
"A masternode requires a \"delegate\" key, which is known to both Dash "
"Electrum and your masternode. Your masternode will use this key to sign "
"messages, and the Dash network will know that you authorized it to. A "
"delegate key can either be one of your Dash Electrum keys, or an imported "
"key. Either way, your masternode and Dash Electrum will both need to know "
"the private key."
msgstr ""

#: ../../wallets/electrum/advanced.rst:111
msgid ""
"To use one of your Dash Electrum keys as a delegate key, put its private key"
" in the **Masternode Private Key** field of the **View Masternode** tab."
msgstr ""

#: ../../wallets/electrum/advanced.rst:116
msgid "IP address and protocol version"
msgstr ""

#: ../../wallets/electrum/advanced.rst:118
msgid ""
"Certain information about your masternode is required. The IP address and "
"port that your masternode uses must be supplied. Also, the protocol version "
"that your masternode supports is required. This information is filled in "
"automatically if you import a \"masternode.conf\" file."
msgstr ""

#: ../../wallets/electrum/advanced.rst:126
#: ../../wallets/electrum/advanced.rst:143
#: ../../wallets/electrum/advanced.rst:164
msgid "Entering IP and protocol information"
msgstr ""

#: ../../wallets/electrum/advanced.rst:129
msgid "Collateral"
msgstr ""

#: ../../wallets/electrum/advanced.rst:131
msgid ""
"To start a masternode, you must have a 1000 DASH payment available in your "
"wallet. You can scan your wallet for 1000 DASH payments in the **Choose "
"Collateral** tab of the Masternode Manager."
msgstr ""

#: ../../wallets/electrum/advanced.rst:135
msgid ""
"After scanning, a list of available 1000 DASH collateral payments will be "
"displayed. Selecting one of them will cause the selected masternode's data "
"to be filled in, though these changes won't be saved until you click the "
"**Save** button in the lower-right corner of the tab."
msgstr ""

#: ../../wallets/electrum/advanced.rst:146
msgid "Activating your masternode"
msgstr ""

#: ../../wallets/electrum/advanced.rst:148
msgid ""
"After selecting a collateral payment and specifying a delegate key, you can "
"activate your masternode. Do this by clicking **Activate Masternode** in the"
" **Activate Masternode** tab of the Masternode Manager. If the **Activate "
"Masternode** button cannot be clicked, look at the message in the **Status**"
" bar. It will show you why your masternode cannot be activated."
msgstr ""

#: ../../wallets/electrum/advanced.rst:155
msgid ""
"Activation will require your password if your wallet is encrypted, because a"
" message must be signed. After waiting for Dash Electrum to sign and "
"broadcast your masternode announcement, you will be presented with a message"
" detailing the result. The status of your masternode will be updated in the "
"table and the **View Masternode** tab."
msgstr ""

#: ../../wallets/electrum/advanced.rst:167
msgid "Importing masternode.conf"
msgstr ""

#: ../../wallets/electrum/advanced.rst:169
msgid ""
"You can import a *masternode.conf* file using the **Masternode.conf** tab of"
" the Masternode Manager. This is the recommended way of setting up "
"masternodes, as it allows you to configure masternodes for Dash Core and "
"Dash Electrum in the same way. Importing a *masternode.conf* file will "
"automatically set up one or more masternode configurations in the Masternode"
" Manager."
msgstr ""

#: ../../wallets/electrum/advanced.rst:177
msgid "Multisig wallets"
msgstr ""

#: ../../wallets/electrum/advanced.rst:179
msgid ""
"This tutorial shows how to create a 2 of 2 multisig wallet. A 2 of 2 "
"multisig consists of 2 separate wallets (usually on separate machines and "
"potentially controlled by separate people) that have to be used in "
"conjunction in order to access the funds. Both wallets have the same set of "
"addresses."
msgstr ""

#: ../../wallets/electrum/advanced.rst:185
msgid ""
"A common use-case for this is if you want to collaboratively control funds: "
"maybe you and your friend run a company together and certain funds should "
"only be spendable if you both agree."
msgstr ""

#: ../../wallets/electrum/advanced.rst:189
msgid ""
"Another one is security: one of the wallets can be on your main machine, "
"while the other one is on a offline machine. That way you make it very hard "
"for an attacker or malware to steal your coins."
msgstr ""

#: ../../wallets/electrum/advanced.rst:194
msgid "Create a pair of 2-of-2 wallets"
msgstr ""

#: ../../wallets/electrum/advanced.rst:196
msgid ""
"Each cosigner needs to do this: In the menu select **File > New**, then "
"select **Multi-signature wallet**. On the next screen, select 2 of 2."
msgstr ""

#: ../../wallets/electrum/advanced.rst:202
msgid "Selecting x of y signatures for a multi-signature wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:204
msgid ""
"After generating and confirming your recovery seed, you will be shown the "
"xpub address for this wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:209
msgid "xpub key of the first wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:211
msgid ""
"After generating a seed (keep it safely!) you will need to provide the "
"master public key of the other wallet. Of course when you create the other "
"wallet, you put the master public key of the first wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:218
msgid "Entering xpub from the second wallet in the first wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:220
msgid ""
"You will need to do this in parallel for the two wallets. Note that you can "
"press cancel during this step, and reopen the file later."
msgstr ""

#: ../../wallets/electrum/advanced.rst:224
msgid "Receiving"
msgstr ""

#: ../../wallets/electrum/advanced.rst:226
msgid ""
"Check that both wallets generate the same set of Addresses. You can now send"
" to these **Addresses** (note they start with a “7”) with any wallet that "
"can send to P2SH Addresses."
msgstr ""

#: ../../wallets/electrum/advanced.rst:231
msgid "Sending"
msgstr "發送"

#: ../../wallets/electrum/advanced.rst:233
msgid ""
"To spend coins from a 2-of-2 wallet, two cosigners need to sign a "
"transaction collaboratively. To accomplish this, create a transaction using "
"one of the wallets (by filling out the form on the **Send** tab). After "
"signing, a window is shown with the transaction details."
msgstr ""

#: ../../wallets/electrum/advanced.rst:241
msgid "Partially signed 2-of-2 multisig transaction in Dash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:243
msgid ""
"The transaction now has to be sent to the second wallet. Several options are"
" available for this:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:246
msgid "You can transfer the file on a USB stick"
msgstr ""

#: ../../wallets/electrum/advanced.rst:248
msgid ""
"You can save the partially signed transaction to a file (using the **Save** "
"button), transfer that to the machine where the second wallet is running "
"(via USB stick, for example) and load it there (using **Tools > Load "
"transaction > From file**)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:253
msgid "You can use QR codes"
msgstr ""

#: ../../wallets/electrum/advanced.rst:255
msgid ""
"A button showing a QR code icon is also available. Clicking this button will"
" display a QR code containing the transaction, which can be scanned into the"
" second wallet (**Tools > Load Transaction > From QR Code**)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:260
msgid ""
"With both of the above methods, you can now add the second signature to the "
"transaction (using the **Sign** button). It will then be broadcast to the "
"network."
msgstr ""

#: ../../wallets/electrum/advanced.rst:267
msgid "Fully signed 2-of-2 multisig transaction in Dash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:270
msgid "Sweep a paper wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:272
msgid ""
"You may have received a paper wallet as a gift from another Dash user, or "
"previously stored one in a safe deposit box. Funds are swept from a "
":ref:`paper wallet <paper-wallets>` into a live wallet by importing its "
"`private key <https://bitzuma.com/posts/six-things-bitcoin-users-should-"
"know-about-private-keys/>`_, which is a long sequence of characters starting"
" with the number \"7\" or the capital letter \"X\". The example below "
"displays a private key (WIF format)."
msgstr ""

#: ../../wallets/electrum/advanced.rst:283
msgid ""
"Public address and associated private key produced by Dash Paper Wallet "
"Generator"
msgstr ""

#: ../../wallets/electrum/advanced.rst:286
msgid ""
"Funds from paper wallets are swept into an Dash Electrum Wallet by creating "
"a transaction using the private key and sending it to a new address from "
"your wallet. This is necessary because it is not possible to add new public "
"or private keys to an existing deterministic series of addresses derived "
"from a seed phrase."
msgstr ""

#: ../../wallets/electrum/advanced.rst:292
msgid ""
"Begin by selecting the **Wallet** > **Private Keys** > **Sweep** menu item. "
"The **Sweep private keys** dialog will appear, where you can paste your "
"private key(s). An unused address controlled by your Dash Electrum wallet "
"appears in the lower field, and can be changed by clicking the **Address** "
"button. Once you have pasted your private key, click the **Sweep** button."
msgstr ""

#: ../../wallets/electrum/advanced.rst:302
msgid "Entering the private key"
msgstr ""

#: ../../wallets/electrum/advanced.rst:304
msgid ""
"Dash Electrum then prepares a transaction using the private key you just "
"imported to derive the public address for the transaction input and the "
"address from your wallet as the output, and signs the message. Click "
"**Broadcast** to enter the transaction on the blockchain. The balance will "
"then appear in your wallet under the specified address. The address you "
"swept is left with zero balance."
msgstr ""

#: ../../wallets/electrum/advanced.rst:314
msgid "Broadcasting the sweep transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:320
msgid "Cold storage"
msgstr ""

#: ../../wallets/electrum/advanced.rst:322
msgid ""
"This section shows how to create an offline wallet that holds your Dash and "
"a watching-only online wallet that is used to view its history and to create"
" transactions that have to be signed with the offline wallet before being "
"broadcast on the online one."
msgstr ""

#: ../../wallets/electrum/advanced.rst:328
msgid "Create an offline wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:330
msgid ""
"Create a wallet on an offline machine, as per the usual process (**File > "
"New**). After creating the wallet, go to **Wallet -> Master Public Keys**."
msgstr ""

#: ../../wallets/electrum/advanced.rst:336
#: ../../wallets/electrum/advanced.rst:353
msgid "Master Public Key of a new offline wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:338
msgid ""
"The Master Public Key of your wallet is the string shown in this popup "
"window. Transfer that key to your online machine somehow."
msgstr ""

#: ../../wallets/electrum/advanced.rst:342
msgid "Create a watching-only version of your wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:344
msgid ""
"On your online machine, open Dash Electrum and select **File > "
"New/Restore**. Enter a name for the wallet and select **Use public or "
"private keys**. Paste your master public key in the box. Click **Next** to "
"complete the creation of your wallet. When you’re done, you should see a "
"popup informing you that you are opening a watching-only wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:355
msgid "The transaction history of your cold wallet should then appear."
msgstr ""

#: ../../wallets/electrum/advanced.rst:358
#: ../../wallets/electrum/advanced.rst:530
msgid "Create an unsigned transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:360
msgid ""
"Go to the **Send** tab on your online watching-only wallet, input the "
"transaction data and click **Send**. A window will appear to inform you that"
" a transaction fee will be added. Continue. In the window that appears up, "
"click **Save** and save the transaction file somewhere on your computer. "
"Close the window and transfer the transaction file to your offline machine "
"(e.g. with a USB stick)."
msgstr ""

#: ../../wallets/electrum/advanced.rst:368
msgid "Sign your transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:370
msgid ""
"On your offline wallet, select **Tools > Load transaction -> From file** in "
"the menu and select the transaction file created in the previous step. Click"
" **Sign**. Once the transaction is signed, the Transaction ID appears in its"
" designated field. Click **Save**, store the file somewhere on your "
"computer, and transfer it back to your online machine."
msgstr ""

#: ../../wallets/electrum/advanced.rst:377
msgid "Broadcast your transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:379
msgid ""
"On your online machine, select **Tools -> Load transaction -> From file** "
"from the menu. Select the signed transaction file. In the window that opens "
"up, click **Broadcast**. The transaction will be broadcast over the Dash "
"network."
msgstr ""

#: ../../wallets/electrum/advanced.rst:385
msgid "Command line"
msgstr ""

#: ../../wallets/electrum/advanced.rst:387
msgid ""
"Dash Electrum has a powerful command line available when running under Linux"
" or macOS. This section will show you a few basic principles."
msgstr ""

#: ../../wallets/electrum/advanced.rst:391
msgid "Using the inline help"
msgstr ""

#: ../../wallets/electrum/advanced.rst:393
msgid "To see the list of Dash Electrum commands, type::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:397
msgid "To see the documentation for a command, type::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:402
msgid "Magic words"
msgstr ""

#: ../../wallets/electrum/advanced.rst:404
msgid ""
"The arguments passed to commands may be one of the following magic words: `!"
" ? : -`."
msgstr ""

#: ../../wallets/electrum/advanced.rst:406
msgid ""
"The exclamation mark `!` is a shortcut that means ‘the maximum amount "
"available’. Note that the transaction fee will be computed and deducted from"
" the amount. Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:412
msgid ""
"A question mark `?` means that you want the parameter to be prompted. "
"Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:417
msgid ""
"Use a colon `:` if you want the prompted parameter to be hidden (not echoed "
"in your terminal). Note that you will be prompted twice in this example, "
"first for the private key, then for your wallet password::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:423
msgid ""
"A parameter replaced by a dash `-` will be read from standard input (in a "
"pipe)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:429
msgid "Aliases"
msgstr ""

#: ../../wallets/electrum/advanced.rst:431
msgid ""
"You can use DNS aliases in place of bitcoin addresses, in most commands::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:436
msgid "Formatting outputs using jq"
msgstr ""

#: ../../wallets/electrum/advanced.rst:438
msgid ""
"Command outputs are either simple strings or json structured data. A very "
"useful utility is the ‘jq’ program. Install it with::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:443
msgid "The following examples use it."
msgstr ""

#: ../../wallets/electrum/advanced.rst:446
msgid "Sign and verify message"
msgstr ""

#: ../../wallets/electrum/advanced.rst:448
msgid "We may use a variable to store the signature, and verify it::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:452
msgid "And::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:457
msgid "Show the values of your unspents"
msgstr ""

#: ../../wallets/electrum/advanced.rst:459
msgid ""
"The `listunspent` command returns a list of dict objects, with various "
"fields. Suppose we want to extract the `value` field of each record. This "
"can be achieved with the jq command::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:466
msgid "Select only incoming transactions from history"
msgstr ""

#: ../../wallets/electrum/advanced.rst:468
msgid "Incoming transactions have a positive ‘value’ field::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:473
msgid "Filter transactions by date"
msgstr ""

#: ../../wallets/electrum/advanced.rst:475
msgid ""
"The following command selects transactions that were timestamped after a "
"given date::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:481
msgid "Similarly, we may export transactions for a given time period::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:488
msgid "Encrypt and decrypt messages"
msgstr ""

#: ../../wallets/electrum/advanced.rst:490
msgid "First we need the public key of a wallet address::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:494
msgid "Encrypt::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:498
msgid "Decrypt::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:502
msgid ""
"Note: this command will prompt for the encrypted message, then for the "
"wallet password."
msgstr ""

#: ../../wallets/electrum/advanced.rst:506
msgid "Export private keys and sweep coins"
msgstr ""

#: ../../wallets/electrum/advanced.rst:508
msgid ""
"The following command will export the private keys of all wallet addresses "
"that hold some Dash::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:513
msgid ""
"This will return a list of lists of private keys. In most cases, you want to"
" get a simple list. This can be done by adding a jq filer, as follows::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:519
msgid ""
"Finally, let us use this list of private keys as input to the sweep "
"command::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:524
msgid "Using cold storage with the command line"
msgstr ""

#: ../../wallets/electrum/advanced.rst:526
msgid ""
"This section will show you how to sign a transaction with an offline Dash "
"Electrum wallet using the command line."
msgstr ""

#: ../../wallets/electrum/advanced.rst:532
msgid ""
"With your online (watching-only) wallet, create an unsigned transaction::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:536
msgid ""
"The unsigned transaction is stored in a file named ‘unsigned.txn’. Note that"
" the –unsigned option is not needed if you use a watching-only wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:540
msgid "You may view it using::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:545
msgid "Sign the transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:547
msgid ""
"The serialization format of Dash Electrum contains the master public key "
"needed and key derivation used by the offline wallet to sign the "
"transaction. Thus we only need to pass the serialized transaction to the "
"offline wallet::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:554
msgid ""
"The command will ask for your password, and save the signed transaction in "
"‘signed.txn’."
msgstr ""

#: ../../wallets/electrum/advanced.rst:557
msgid "Broadcast the transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:559
msgid "Send your transaction to the Dash network, using broadcast::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:563
msgid "If successful, the command will return the ID of the transaction."
msgstr ""

#: ../../wallets/electrum/advanced.rst:566
msgid "How to accept Dash on a website using Dash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:568
msgid ""
"This tutorial will show you how to accept dash on a website with SSL signed "
"payment requests. It is updated for Dash Electrum 2.6."
msgstr ""

#: ../../wallets/electrum/advanced.rst:572
msgid "Requirements"
msgstr ""

#: ../../wallets/electrum/advanced.rst:574
msgid "A webserver serving static HTML"
msgstr ""

#: ../../wallets/electrum/advanced.rst:575
msgid "A SSL certificate (signed by a CA)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:576
msgid "Electrum version >= 2.6"
msgstr ""

#: ../../wallets/electrum/advanced.rst:579
msgid "Create a wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:581
msgid "Create a wallet on your web server::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:585
msgid ""
"You can also use a watching only wallet (restored from xpub), if you want to"
" keep private keys off the server. Once your wallet is created, start Dash "
"Electrum as a daemon::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:592
msgid "Add your SSL certificate to your configuration"
msgstr ""

#: ../../wallets/electrum/advanced.rst:594
msgid ""
"You should have a private key and a public certificate for your domain. "
"Create a file that contains only the private key::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:601
msgid "Set the path to your the private key file with setconfig::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:605
msgid ""
"Create another file that contains your certificate and the list of "
"certificates it depends on, up to the root CA. Your certificate must be at "
"the top of the list, and the root CA at the end::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:619
msgid "Set the `ssl_chain` path with setconfig::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:624
msgid "Configure a requests directory"
msgstr ""

#: ../../wallets/electrum/advanced.rst:626
msgid "This directory must be served by your webserver (eg Apache)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:630
msgid ""
"By default, Dash Electrum will display local URLs, starting with ‘file://‘ "
"In order to display public URLs, we need to set another configuration "
"variable, `url_rewrite`. For example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:637
msgid "Create a signed payment request"
msgstr ""

#: ../../wallets/electrum/advanced.rst:656
msgid "This command returns a json object with two URLs:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:658
msgid "`request_url` is the URL of the signed BIP70 request."
msgstr ""

#: ../../wallets/electrum/advanced.rst:659
msgid "`index_url` is the URL of a webpage displaying the request."
msgstr ""

#: ../../wallets/electrum/advanced.rst:661
msgid ""
"Note that request_url and index_url use the domain name we defined in "
"`url_rewrite`. You can view the current list of requests using the "
"`listrequests` command."
msgstr ""

#: ../../wallets/electrum/advanced.rst:666
msgid "Open the payment request page in your browser"
msgstr ""

#: ../../wallets/electrum/advanced.rst:668
msgid "Let us open `index_url` in a web browser."
msgstr ""

#: ../../wallets/electrum/advanced.rst:673
msgid "Payment request page in a web browser"
msgstr ""

#: ../../wallets/electrum/advanced.rst:675
msgid ""
"The page shows the payment request. You can open the dash: URI with a "
"wallet, or scan the QR code. The bottom line displays the time remaining "
"until the request expires."
msgstr ""

#: ../../wallets/electrum/advanced.rst:682
msgid "Wallet awaiting payment"
msgstr ""

#: ../../wallets/electrum/advanced.rst:684
msgid ""
"This page can already be used to receive payments. However, it will not "
"detect that a request has been paid; for that we need to configure "
"websockets."
msgstr ""

#: ../../wallets/electrum/advanced.rst:689
msgid "Add web sockets support"
msgstr ""

#: ../../wallets/electrum/advanced.rst:691
msgid "Get SimpleWebSocketServer from here::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:695
msgid "Set `websocket_server` and `websocket_port` in your config::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:700
msgid "And restart the daemon::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:705
msgid ""
"Now, the page is fully interactive: it will update itself when the payment "
"is received. Please notice that higher ports might be blocked on some "
"client’s firewalls, so it is more safe for example to reverse proxy "
"websockets transmission using standard 443 port on an additional subdomain."
msgstr ""

#: ../../wallets/electrum/advanced.rst:712
msgid "JSONRPC interface"
msgstr ""

#: ../../wallets/electrum/advanced.rst:714
msgid ""
"Commands to the Dash Electrum daemon can be sent using JSONRPC. This is "
"useful if you want to use Dash Electrum in a PHP script."
msgstr ""

#: ../../wallets/electrum/advanced.rst:717
msgid ""
"Note that the daemon uses a random port number by default. In order to use a"
" stable port number, you need to set the `rpcport` configuration variable "
"(and to restart the daemon)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:723
msgid "With this setting, we can perform queries using curl or PHP. Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:727
msgid "Query with named parameters::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:731
msgid "Create a payment request::"
msgstr ""
